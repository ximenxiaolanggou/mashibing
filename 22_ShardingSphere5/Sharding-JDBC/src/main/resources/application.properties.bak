
spring.shardingsphere.mode.type=Memory
# 配置数据源的名称
spring.shardingsphere.datasource.names=ds1
# 配置数据源的具体内容
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://127.0.0.1:3306/sharding_sphere_1?serverTimezone=UTC
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=zhishun.cai

  # 标准分片表配置(指定orders表的分布情况，配置表在哪个数据库中，表名称是什么)
spring.shardingsphere.rules.sharding.tables.molds.actual-data-nodes=ds1.mold_$->{0..1}
spring.shardingsphere.rules.sharding.tables.products.actual-data-nodes=ds1.product_$->{0..1}
spring.shardingsphere.rules.sharding.tables.cycles.actual-data-nodes=ds1.cycle_$->{0..1}
spring.shardingsphere.rules.sharding.tables.sensors.actual-data-nodes=ds1.sensor_$->{0..1}



spring.shardingsphere.rules.sharding.tables.sensors.table-strategy.standard.sharding-column=mold_id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.sensors.table-strategy.standard.sharding-algorithm-name=inline_table_sensors

# 水平分表
# 分片列名称
spring.shardingsphere.rules.sharding.tables.cycles.table-strategy.standard.sharding-column=mold_id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.cycles.table-strategy.standard.sharding-algorithm-name=inline_table_cycles


spring.shardingsphere.rules.sharding.tables.products.table-strategy.standard.sharding-column=mold_id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.products.table-strategy.standard.sharding-algorithm-name=inline_table_products


spring.shardingsphere.rules.sharding.tables.molds.table-strategy.standard.sharding-column=id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.molds.table-strategy.standard.sharding-algorithm-name=inline_table_molds




#------------------------分片算法配置


# 行表达式分片算法
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.inline_table_sensors.type=INLINE
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.inline_table_sensors.props.algorithm-expression=sensor_$->{mold_id%2}

# 行表达式分片算法
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.inline_table_cycles.type=INLINE
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.inline_table_cycles.props.algorithm-expression=cycle_$->{mold_id%2}

# 行表达式分片算法
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.inline_table_products.type=INLINE
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.inline_table_products.props.algorithm-expression=product_$->{mold_id%2}

spring.shardingsphere.rules.sharding.sharding-algorithms.inline_table_molds.type=INLINE
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.inline_table_molds.props.algorithm-expression=mold_$->{id%2}

  
  
  #指定orders表里主键id生成策略
  # spring.shardingsphere.rules.sharding.tables.orders.key-generate-strategy.column=id
  # spring.shardingsphere.rules.sharding.tables.orders.key-generate-strategy.key-generator-name=snowflake

# 绑定表
spring.shardingsphere.rules.sharding.binding-tables[0]=molds,products,cycles,sensors

# 广播表
# spring.shardingsphere.rules.sharding.broadcast-tables[0]=users
  #打开sql输出日志
spring.shardingsphere.props.sql-show=true

